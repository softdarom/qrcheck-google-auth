import net.logstash.logback.composite.GlobalCustomFieldsJsonProvider
import net.logstash.logback.composite.LogstashVersionJsonProvider
import net.logstash.logback.composite.loggingevent.*
import net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder
import org.springframework.boot.logging.logback.ColorConverter
import java.nio.charset.Charset

import static groovy.json.JsonOutput.toJson

statusListener(NopStatusListener)

conversionRule("clr", ColorConverter)
appender("CONSOLE", ConsoleAppender) {
    encoder(PatternLayoutEncoder) {
        pattern = "%d{ISO8601} %clr([${System.getProperty("PID") ?: ''}] [%X{traceId}] [%X{spanId}]){magenta} %clr([%level{5}]) %clr(---){faint} %clr([%logger{36}]){cyan} %clr(:){faint} %m%n%ex"
        charset = Charset.forName("UTF-8")
    }
}

appender("LOGSTASH", RollingFileAppender) {
    file = "{{ application.path.logs }}/{{ application.name }}.log"
    rollingPolicy(TimeBasedRollingPolicy) {
        fileNamePattern = "{{ application.path.logs }}/{{ application.name }}.%d{dd-MM-yyyy}.%i.log.zip"
        timeBasedFileNamingAndTriggeringPolicy(SizeAndTimeBasedFNATP) {
            maxFileSize = "10MB"
        }
        maxHistory = 30
    }

    encoder(LoggingEventCompositeJsonEncoder) {
        providers(LoggingEventJsonProviders) {
            timestamp(LoggingEventFormattedTimestampJsonProvider) {
                timeZone = 'UTC'
            }
            version(LogstashVersionJsonProvider)
            logLevel(LogLevelJsonProvider)
            message(MessageJsonProvider)
            loggerName(LoggerNameJsonProvider)
            threadName(ThreadNameJsonProvider) {
                fieldName = 'thread'
            }
            globalCustomFields(GlobalCustomFieldsJsonProvider) {
                customFields = toJson(application_name: "{{ application.name }}")
            }
            pattern(LoggingEventPatternJsonProvider) {
                pattern = toJson(
                        "span_id": '%X{spanId:-}',
                        "trace_id": '%X{traceId:-}'
                )
            }
            stackTrace(StackTraceJsonProvider)
        }
    }
}

root(INFO, ["CONSOLE", "LOGSTASH"])